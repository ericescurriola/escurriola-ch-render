{"version":3,"sources":["serviceWorker.js","components/Navigation/Navigation.js","components/NoPageFound.js","logo.svg","components/Home/Home.js","components/Mail.js","components/Portfolio.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Navigation","className","to","href","target","NoPage","Home","src","logo","alt","Component","Mail","Portfolio","App","path","element","index","NoPageFound","rootContainer","document","getElementById","createRoot","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yOAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,wCCASC,EAfI,WACjB,OACE,qCACE,qBAAKC,UAAU,MAAK,SAClB,sBAAKA,UAAU,QAAO,UACpB,cAAC,IAAO,CAACC,GAAG,IAAID,UAAU,OAAM,oBAChC,mBAAGE,KAAK,8BAA8BC,OAAO,QAAQH,UAAU,OAAM,4BAIzE,cAAC,IAAM,MAGb,ECZeI,EAJA,WACX,OAAO,oCACX,E,4BCFe,MAA0B,iCCInCC,G,MAAI,kHAiBP,OAjBO,mCACR,WACE,OACE,sBAAKL,UAAU,OAAM,UACnB,sBAAKA,UAAU,UAAS,UACpB,gEACA,mBAAGA,UAAU,OAAM,qRAMvB,qBAAKA,UAAU,iBAAgB,SAC3B,qBAAKM,IAAKC,EAAMP,UAAU,YAAYQ,IAAI,aAIpD,KAAC,EAjBO,CAASC,cAoBJJ,ICrBTK,G,MAAI,kHAKP,OALO,mCACR,WACE,MACE,CAAoG,CAExG,KAAC,EALO,CAASD,cAQJC,ICTTC,EAAS,kHAOZ,OAPY,mCACb,WACE,OAEI,4CAGN,KAAC,EAPY,CAASF,aAUTE,ICEA,SAASC,IACpB,OACE,cAAC,IAAa,UACZ,cAAC,IAAM,UACL,eAAC,IAAK,CAACC,KAAK,IAAIC,QAAS,cAAC,EAAU,IAAI,UACtC,cAAC,IAAK,CAACC,OAAK,EAACD,QAAS,cAAC,EAAI,MAC3B,cAAC,IAAK,CAACD,KAAK,OAAOC,QAAS,cAAC,EAAI,MACjC,cAAC,IAAK,CAACD,KAAK,YAAYC,QAAS,cAAC,EAAS,MAC3C,cAAC,IAAK,CAACD,KAAK,IAAIC,QAAS,cAACE,EAAW,YAKjD,CCrBA,IAAMC,EAAgBC,SAASC,eAAe,QACjCC,qBAAWH,GACnBI,OAAO,cAAC,EAAG,KRyHV,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,YACf,G","file":"static/js/main.58c277c9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { Outlet, NavLink } from \"react-router-dom\";\r\nimport './Navigation.css'\r\n\r\nconst Navigation = () => {\r\n  return (\r\n    <>\r\n      <nav className=\"nav\">\r\n        <div className=\"pages\">\r\n          <NavLink to=\"/\" className=\"page\"> Home </NavLink> \r\n          <a href=\"https://postale.io/webmail/\" target=\"blank\" className=\"page\"> Webmail </a>\r\n          {/* <NavLink to=\"/portfolio\" className=\"page\"> Portfolio </NavLink> */}\r\n        </div>\r\n      </nav>\r\n      <Outlet />\r\n    </>\r\n  )\r\n};\r\n\r\nexport default Navigation;","const NoPage = () => {\r\n    return <h1>404</h1>;\r\n};\r\n  \r\nexport default NoPage;","export default __webpack_public_path__ + \"static/media/logo.c0e7277a.svg\";","import React, { Component } from 'react';\r\nimport logo from '../../logo.svg';\r\nimport './Home.css'\r\n\r\nclass Home extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"home\">\r\n        <div className='welcome'>\r\n            <h1> Willkommen bei escurriola.ch </h1>\r\n            <p className='text'> \r\n                Auf dieser Webseite vergnüge ich mich mit eigenen Projekten die mir Spass machen.\r\n                In meinen Projekten geht es um Frontend-Entwicklung. Dabei teste ich JS-Bibliotheken\r\n                3D-Loaders, Hosting Services, Full Stack Lösungen, Blogbeiträge, Designs und mehr...\r\n            </p>\r\n        </div>\r\n        <div className='logo-container'>\r\n            <img src={logo} className=\"home-logo\" alt=\"logo\" />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import { Component } from 'react';\r\nimport './Mail.css'\r\n\r\nclass Mail extends Component {\r\n  render() {\r\n    return (\r\n      {/*<iframe title=\"Webmail\" className='frame' src=\"https://postale.io/webmail/\"> Webmail </iframe>*/ }\r\n    );\r\n  }\r\n}\r\n\r\nexport default Mail;\r\n","import React, { Component } from 'react';\r\n\r\nclass Portfolio extends Component {\r\n  render() {\r\n    return (\r\n   \r\n        <h1> Portfolio </h1>\r\n          \r\n    );\r\n  }\r\n}\r\n\r\nexport default Portfolio;\r\n","import React from 'react';\r\nimport {\r\n  BrowserRouter,\r\n  Routes,\r\n  Route\r\n} from \"react-router-dom\";\r\n\r\nimport './App.css';\r\nimport Navigation from './components/Navigation/Navigation'; \r\nimport NoPageFound from './components/NoPageFound';\r\nimport Home from './components/Home/Home.js';\r\nimport Mail from './components/Mail';\r\nimport Portfolio from './components/Portfolio';\r\n\r\nexport default function App () {\r\n    return (\r\n      <BrowserRouter>\r\n        <Routes>\r\n          <Route path=\"/\" element={<Navigation />}>\r\n            <Route index element={<Home />} />\r\n            <Route path=\"mail\" element={<Mail />} />\r\n            <Route path=\"portfolio\" element={<Portfolio />} />\r\n            <Route path=\"*\" element={<NoPageFound />} />\r\n          </Route>\r\n        </Routes>\r\n      </BrowserRouter> \r\n    )\r\n};\r\n\r\n","import React from 'react';\r\nimport { createRoot } from 'react-dom/client';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './App';\r\n\r\nconst rootContainer = document.getElementById('root');\r\nconst root = createRoot(rootContainer);\r\nroot.render(<App />);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}